{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "UnbondRequestsByUserResponseItemDetails",
  "type": "object",
  "required": ["id", "shares", "state"],
  "properties": {
    "batch": {
      "anyOf": [
        {
          "$ref": "#/definitions/Batch"
        },
        {
          "type": "null"
        }
      ]
    },
    "id": {
      "description": "ID of the batch",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "pending": {
      "anyOf": [
        {
          "$ref": "#/definitions/PendingBatch"
        },
        {
          "type": "null"
        }
      ]
    },
    "shares": {
      "description": "The user's share in the batch",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "state": {
      "type": "string"
    }
  },
  "definitions": {
    "Batch": {
      "type": "object",
      "required": [
        "est_unbond_end_time",
        "id",
        "reconciled",
        "total_shares",
        "utoken_unclaimed"
      ],
      "properties": {
        "est_unbond_end_time": {
          "description": "Estimated time when this batch will finish unbonding",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "id": {
          "description": "ID of this batch",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "reconciled": {
          "description": "Whether this batch has already been reconciled",
          "type": "boolean"
        },
        "total_shares": {
          "description": "Total amount of shares remaining this batch. Each `ustake` burned = 1 share",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "utoken_unclaimed": {
          "description": "Amount of `utoken` in this batch that have not been claimed",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      }
    },
    "PendingBatch": {
      "type": "object",
      "required": ["est_unbond_start_time", "id", "ustake_to_burn"],
      "properties": {
        "est_unbond_start_time": {
          "description": "Estimated time when this batch will be submitted for unbonding",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "id": {
          "description": "ID of this batch",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "ustake_to_burn": {
          "description": "Total amount of `ustake` to be burned in this batch",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
