{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Implements the Cw20 receiver interface",
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Bond specified amount of Luna",
      "type": "object",
      "required": [
        "bond"
      ],
      "properties": {
        "bond": {
          "type": "object",
          "properties": {
            "receiver": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraw Luna that have finished unbonding in previous batches",
      "type": "object",
      "required": [
        "withdraw_unbonded"
      ],
      "properties": {
        "withdraw_unbonded": {
          "type": "object",
          "properties": {
            "receiver": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Add a validator to the whitelist; callable by the owner",
      "type": "object",
      "required": [
        "add_validator"
      ],
      "properties": {
        "add_validator": {
          "type": "object",
          "required": [
            "validator"
          ],
          "properties": {
            "validator": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove a validator from the whitelist; callable by the owner",
      "type": "object",
      "required": [
        "remove_validator"
      ],
      "properties": {
        "remove_validator": {
          "type": "object",
          "required": [
            "validator"
          ],
          "properties": {
            "validator": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Transfer ownership to another account; will not take effect unless the new owner accepts",
      "type": "object",
      "required": [
        "transfer_ownership"
      ],
      "properties": {
        "transfer_ownership": {
          "type": "object",
          "required": [
            "new_owner"
          ],
          "properties": {
            "new_owner": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Accept an ownership transfer",
      "type": "object",
      "required": [
        "accept_ownership"
      ],
      "properties": {
        "accept_ownership": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Claim staking rewards, swap all for Luna, and restake",
      "type": "object",
      "required": [
        "harvest"
      ],
      "properties": {
        "harvest": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Use redelegations to balance the amounts of Luna delegated to validators",
      "type": "object",
      "required": [
        "rebalance"
      ],
      "properties": {
        "rebalance": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update Luna amounts in unbonding batches to reflect any slashing or rounding errors",
      "type": "object",
      "required": [
        "reconcile"
      ],
      "properties": {
        "reconcile": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Submit the current pending batch of unbonding requests to be unbonded",
      "type": "object",
      "required": [
        "submit_batch"
      ],
      "properties": {
        "submit_batch": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Callbacks; can only be invoked by the contract itself",
      "type": "object",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "$ref": "#/definitions/CallbackMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates the fee config,",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "protocol_fee_contract": {
              "description": "Contract address where fees are sent",
              "type": [
                "string",
                "null"
              ]
            },
            "protocol_reward_fee": {
              "description": "Fees that are being applied during reinvest of staking rewards",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "CallbackMsg": {
      "oneOf": [
        {
          "description": "Swap Terra stablecoins held by the contract to Luna Following the swaps, stake the Luna acquired to the whitelisted validators",
          "type": "object",
          "required": [
            "reinvest"
          ],
          "properties": {
            "reinvest": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
